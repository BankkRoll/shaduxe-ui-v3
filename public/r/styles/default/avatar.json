{
  "name": "avatar",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/avatar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\n\nconst avatarVariants = cva(\"relative flex shrink-0 overflow-hidden\", {\n  variants: {\n    variant: {\n      circle: \"rounded-full\",\n      square: \"rounded-none\",\n      rounded: \"rounded-md\",\n    },\n    size: {\n      xs: \"size-6\",\n      sm: \"size-8\",\n      md: \"size-10\",\n      lg: \"size-12\",\n      xl: \"size-16\",\n      \"2xl\": \"size-20\",\n    },\n  },\n  defaultVariants: {\n    variant: \"circle\",\n    size: \"md\",\n  },\n});\n\nconst avatarImageVariants = cva(\"aspect-square size-full\", {\n  variants: {\n    variant: {\n      circle: \"rounded-full\",\n      square: \"rounded-none\",\n      rounded: \"rounded-md\",\n    },\n  },\n  defaultVariants: {\n    variant: \"circle\",\n  },\n});\n\nexport interface AvatarProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof avatarVariants> {}\n\nconst Avatar = React.forwardRef<HTMLDivElement, AvatarProps>(\n  ({ className, variant, size, ...props }, ref) => (\n    <AvatarPrimitive.Root\n      ref={ref}\n      className={cn(avatarVariants({ variant, size }), className)}\n      {...props}\n    >\n      {React.Children.map(props.children, (child) =>\n        React.isValidElement(child)\n          ? React.cloneElement(child as React.ReactElement<any>, {\n              variant,\n              className: cn(\n                (child as React.ReactElement<any>).props.className,\n                avatarImageVariants({ variant }),\n              ),\n            })\n          : child,\n      )}\n    </AvatarPrimitive.Root>\n  ),\n);\nAvatar.displayName = AvatarPrimitive.Root.displayName;\n\nexport interface AvatarImageProps\n  extends React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image> {\n  variant?: VariantProps<typeof avatarVariants>[\"variant\"];\n}\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  AvatarImageProps\n>(({ className, variant, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(avatarImageVariants({ variant }), className)}\n    {...props}\n  />\n));\nAvatarImage.displayName = AvatarPrimitive.Image.displayName;\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex size-full items-center justify-center bg-muted\",\n      className,\n    )}\n    {...props}\n  />\n));\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;\n\nexport { Avatar, AvatarImage, AvatarFallback };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}