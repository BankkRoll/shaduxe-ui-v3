{
  "name": "switch",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/switch.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\nimport { Sun, Moon } from \"lucide-react\";\n\nconst switchVariants = cva(\n  \"peer inline-flex shrink-0 cursor-pointer items-center border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n  {\n    variants: {\n      variant: {\n        default: \"rounded\",\n        rounded: \"rounded-full\",\n        square: \"rounded-none\",\n        ios: \"rounded-full data-[state=checked]:bg-green-400\",\n      },\n      size: {\n        icon: \"h-5 w-5\",\n        xs: \"h-3 w-6\",\n        sm: \"h-4 w-7\",\n        md: \"h-5 w-9\",\n        lg: \"h-6 w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"md\",\n    },\n  },\n);\n\nconst switchThumbVariants = cva(\n  \"pointer-events-none block bg-background shadow-lg ring-0 transition-transform data-[state=unchecked]:translate-x-0\",\n  {\n    variants: {\n      variant: {\n        default: \"rounded\",\n        rounded: \"rounded-full\",\n        square: \"rounded-none\",\n        ios: \"rounded-full shadow-md\",\n      },\n      size: {\n        icon: \"h-4 w-4 data-[state=checked]:translate-x-0\",\n        xs: \"h-2 w-2 data-[state=checked]:translate-x-3\",\n        sm: \"h-3 w-3 data-[state=checked]:translate-x-3\",\n        md: \"h-4 w-4 data-[state=checked]:translate-x-4\",\n        lg: \"h-5 w-5 data-[state=checked]:translate-x-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"md\",\n    },\n  },\n);\n\nexport interface SwitchProps\n  extends React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>,\n    VariantProps<typeof switchVariants> {\n  thumbVariant?: VariantProps<typeof switchThumbVariants>[\"variant\"];\n  showLabels?: boolean;\n  labelOn?: string;\n  labelOff?: string;\n  showIcons?: boolean;\n}\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  SwitchProps\n>(\n  (\n    {\n      className,\n      variant,\n      size,\n      thumbVariant,\n      showLabels,\n      labelOn = \"On\",\n      labelOff = \"Off\",\n      showIcons,\n      checked,\n      defaultChecked,\n      onCheckedChange,\n      ...props\n    },\n    ref,\n  ) => {\n    const iconSize = React.useMemo(() => {\n      switch (size) {\n        case \"icon\":\n          return 12;\n        case \"xs\":\n          return 8;\n        case \"sm\":\n          return 10;\n        case \"md\":\n          return 12;\n        case \"lg\":\n          return 14;\n        default:\n          return 12;\n      }\n    }, [size]);\n\n    const [internalChecked, setInternalChecked] = React.useState(\n      defaultChecked || false,\n    );\n\n    const isControlled = checked !== undefined;\n    const isChecked = isControlled ? checked : internalChecked;\n\n    const handleCheckedChange = (newChecked: boolean) => {\n      if (!isControlled) {\n        setInternalChecked(newChecked);\n      }\n      onCheckedChange?.(newChecked);\n    };\n\n    return (\n      <div className=\"inline-flex items-center\">\n        {showLabels && (\n          <span\n            className={cn(\n              \"mr-2 text-sm\",\n              isChecked ? \"text-primary/80\" : \"text-primary\",\n            )}\n          >\n            {labelOff}\n          </span>\n        )}\n        <SwitchPrimitives.Root\n          className={cn(switchVariants({ variant, size, className }))}\n          checked={isChecked}\n          onCheckedChange={handleCheckedChange}\n          {...props}\n          ref={ref}\n        >\n          <SwitchPrimitives.Thumb\n            className={cn(\n              switchThumbVariants({\n                variant: thumbVariant || variant,\n                size,\n              }),\n              \"flex items-center justify-center\",\n            )}\n          >\n            {showIcons &&\n              (isChecked ? <Sun size={iconSize} /> : <Moon size={iconSize} />)}\n          </SwitchPrimitives.Thumb>\n        </SwitchPrimitives.Root>\n        {showLabels && (\n          <span\n            className={cn(\n              \"ml-2 text-sm\",\n              isChecked ? \"text-primary\" : \"text-primary/80\",\n            )}\n          >\n            {labelOn}\n          </span>\n        )}\n      </div>\n    );\n  },\n);\nSwitch.displayName = SwitchPrimitives.Root.displayName;\n\nexport { Switch };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}